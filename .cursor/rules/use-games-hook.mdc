---
description: Documentation and usage guidelines for the game hooks
globs: src/hooks/games/**/*.ts, **/*.tsx
alwaysApply: false
---
# Game Hooks

Documentation and usage guidelines for the game-related hooks.

<rule>
name: game_hooks
description: Guidelines for using the game hooks to interact with the games table in Supabase

filters:
  - type: file_path
    pattern: "src/hooks/games/.*\\.ts$"
  - type: file_path
    pattern: "src/hooks/useGames.ts"
  - type: file_path
    pattern: ".*\\.tsx$"
  - type: content
    pattern: "useGames|useGamesQueries|useGamesMutations|useGamesSubscriptions"

actions:
  - type: suggest
    message: |
      ## Game Hooks Usage

      The game hooks provide a comprehensive set of queries, mutations, and subscriptions for interacting with the games table in Supabase. They use Supabase Cache Helpers for automatic cache management.

      ### Recommended Usage (New API)

      ```tsx
      import { useGamesQueries, useGamesMutations, useGamesSubscriptions } from '@/hooks/games';

      function Component() {
        // For queries
        const { useGames, useGame, useGameImages, useGameRules } = useGamesQueries();
        
        // For mutations
        const { useCreateGame, useUpdateGame, useDeleteGame, useUpdateGameStatus, useSetGameCoverImage } = useGamesMutations();
        
        // For subscriptions
        const { useSubscribeToGames, useSubscribeToGameImages } = useGamesSubscriptions();

        // Use the hooks as needed
        const { data: games, isLoading } = useGames({ status: ['published'] });
        
        // Mutations are already initialized
        const handleUpdate = () => {
          useUpdateGame.mutate({ id: 'game-id', name: 'New Name' });
        };
        
        // Subscriptions need to be called
        useSubscribeToGames();
      }
      ```

      ### Legacy Usage (Deprecated)

      ```tsx
      import { useGames } from '@/hooks/useGames';

      function Component() {
        const {
          useGamesQuery,
          useGameQuery,
          useCreateGameMutation,
          // other hooks...
        } = useGames();

        // These hooks need to be called to initialize them
        const { data: games } = useGamesQuery();
        const createGameMutation = useCreateGameMutation();
      }
      ```

      ### Game Processing Service

      For processing game images through the edge function:

      ```tsx
      import { uploadGameImages, processGameImages } from '@/services/gameProcessingService';

      async function handleUpload() {
        // Upload images
        const uploadedImages = await uploadGameImages(userId, images);
        
        // Process images and create game
        const result = await processGameImages(uploadedImages);
        
        // Use the result
        const { game } = result;
      }
      ```

      ### Available Hooks

      #### Queries (useGamesQueries)
      - `useGames(options?)` - Get all games with optional filtering
      - `useGame(id, options?)` - Get a single game by ID
      - `useGameImages(gameId, options?)` - Get all images for a game
      - `useGameRules(gameId, options?)` - Get all rules for a game

      #### Mutations (useGamesMutations)
      - `useCreateGame` - Create a new game
      - `useUpdateGame` - Update a game
      - `useDeleteGame` - Delete a game
      - `useUpdateGameStatus` - Update a game's status
      - `useSetGameCoverImage` - Set a game's cover image

      #### Subscriptions (useGamesSubscriptions)
      - `useSubscribeToGames(options?)` - Subscribe to changes in the games table
      - `useSubscribeToGameImages(gameId, options?)` - Subscribe to changes in a game's images

      ### Benefits of the New Structure
      
      - **Reduced bundle size**: Only import the hooks you need
      - **Improved performance**: No unnecessary re-renders
      - **Better organization**: Separation of concerns
      - **Easier testing**: Test individual hooks in isolation
      - **Automatic cache management**: Supabase Cache Helpers handle cache invalidation

examples:
  - input: |
      // Old way: Fetching games
      const { useGamesQuery } = useGames();
      const { data: games } = useGamesQuery();
    output: |
      // New way: Fetching games with filtering
      import { useGamesQueries } from '@/hooks/games';
      
      const { useGames } = useGamesQueries();
      const { data: games, isLoading, error } = useGames({
        status: ['published'],
        authorId: 'user-id'
      });

      if (isLoading) return <div>Loading...</div>;
      if (error) return <div>Error: {error.message}</div>;

  - input: |
      // Old way: Creating a game
      const { useCreateGameMutation } = useGames();
      const createGameMutation = useCreateGameMutation();
    output: |
      // New way: Creating a game
      import { useGamesMutations } from '@/hooks/games';
      
      const { useCreateGame } = useGamesMutations();
      
      const handleCreateGame = () => {
        useCreateGame.mutate({
          name: 'New Game',
          author_id: 'user-id',
          status: 'draft',
          description: 'A new game'
        });
      };

  - input: |
      // Old way: Subscribing to changes
      const { useGamesSubscription } = useGames();
      useGamesSubscription();
    output: |
      // New way: Subscribing to changes with options
      import { useGamesSubscriptions } from '@/hooks/games';
      
      const { useSubscribeToGames, useSubscribeToGameImages } = useGamesSubscriptions();
      
      // Subscribe to all games
      useSubscribeToGames({ enabled: true });
      
      // For a specific game's images
      useSubscribeToGameImages(gameId, { enabled: true });

metadata:
  priority: high
  version: 2.0
  tags:
    - hooks
    - supabase
    - games
</rule> 